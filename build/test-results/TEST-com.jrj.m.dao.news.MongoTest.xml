<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.jrj.m.dao.news.MongoTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2015-01-26T01:29:10" hostname="weibo-qin" time="0.062">
  <properties/>
  <testcase name="findByQuery" classname="com.jrj.m.dao.news.MongoTest" time="0.062"/>
  <system-out><![CDATA[secondaryPreferred
secondary
{ "_id" : { "$oid" : "54c34ee475a8e109bf00a8ff"} , "_class" : "com.jrj.m.model.news.History" , "title" : "88：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:00.911Z"}}
{ "_id" : { "$oid" : "54c34ee475a8e109bf00a900"} , "_class" : "com.jrj.m.model.news.History" , "title" : "89：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:00.947Z"}}
{ "_id" : { "$oid" : "54c34ee475a8e109bf00a901"} , "_class" : "com.jrj.m.model.news.History" , "title" : "90：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:00.982Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a902"} , "_class" : "com.jrj.m.model.news.History" , "title" : "91：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.018Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a903"} , "_class" : "com.jrj.m.model.news.History" , "title" : "92：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.053Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a904"} , "_class" : "com.jrj.m.model.news.History" , "title" : "93：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.120Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a905"} , "_class" : "com.jrj.m.model.news.History" , "title" : "94：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.156Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a906"} , "_class" : "com.jrj.m.model.news.History" , "title" : "95：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.191Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a907"} , "_class" : "com.jrj.m.model.news.History" , "title" : "96：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.228Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a908"} , "_class" : "com.jrj.m.model.news.History" , "title" : "97：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.263Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a909"} , "_class" : "com.jrj.m.model.news.History" , "title" : "98：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.299Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a90a"} , "_class" : "com.jrj.m.model.news.History" , "title" : "99：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.334Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a90b"} , "_class" : "com.jrj.m.model.news.History" , "title" : "100：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.370Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a90c"} , "_class" : "com.jrj.m.model.news.History" , "title" : "101：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.422Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a90d"} , "_class" : "com.jrj.m.model.news.History" , "title" : "102：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.461Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a90e"} , "_class" : "com.jrj.m.model.news.History" , "title" : "103：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.497Z"}}
{ "_id" : { "$oid" : "54c34ee575a8e109bf00a90f"} , "_class" : "com.jrj.m.model.news.History" , "title" : "104：mongodb固定集合(Capped Collection)和大文件管理(GridFS)" , "author" : "Capped Collection" , "content" : "固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。" , "tags" : [ "mongoDb" , "capped collection" , "nosql"] , "cTime" : { "$date" : "2015-01-24T07:51:01.533Z"}}
{ "_id" : { "$oid" : "54c5947675a8f14b72d63024"} , "tags" : [ "mongoDB" , "NOSQL"] , "content" : "内容" , "author" : "作者" , "title" : "news title" , "cTime" : { "$date" : "2015-01-26T01:12:21.993Z"}}
]]></system-out>
  <system-err><![CDATA[SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
]]></system-err>
</testsuite>
